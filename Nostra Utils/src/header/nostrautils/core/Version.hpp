#ifndef	NOU_CORE_VERSION_HPP
#define	NOU_CORE_VERSION_HPP

#include "nostrautils\core\StdIncludes.hpp"
#include "nostrautils\core\Utils.hpp"

namespace NOU::NOU_CORE
{
	/**
	\brief A class that wraps around the macros from the StdIncludes.hpp that generate versions
	       (like NOU_MAKE_VERSION). However, this struct does not have problems with overflowing the single 
		   parts.
	*/
	struct NOU_CLASS Version final
	{
	public:
		/**
		\brief The type of a version (which also serves as the type for the parts).
		*/
		using VersionType = decltype(NOU_MAKE_VERISON(0, 0, 0));

	private:
		/**
		\brief The version itself.
		*/
		VersionType m_version;

	public:
		/**
		\param version The version to import.
		
		\brief Imports a version that was previously created using NOU_MAKE_VERSION.
		*/
		constexpr Version(VersionType version);

		/**
		\brief major The major part of the version.
		\brief minor The minor part of the version.
		\brief patch The patch part of the version.

		\brief Constructs a new version.

		\details
		Constructs a new version. This constructor will clamp the values of the parts to avoid overflows. The
		maximum values of the parts are determined by the NOU_VERSION_*_MAX macros.
		*/
		constexpr Version(VersionType major, VersionType minor, VersionType patch);

		/**
		\return The full version.

		\brief Returns the full version as generated by NOU_MAKE_VERSION.
		*/
		constexpr VersionType getRaw() const;

		/**
		\return The major part of the version.

		\brief Returns the major part of the version.
		*/
		constexpr VersionType getMajor() const;

		/**
		\return The minor part of the version.

		\brief Returns the major part of the version.
		*/
		constexpr VersionType getMinor() const;

		/**
		\return The patch part of the version.

		\brief Returns the major part of the version.
		*/
		constexpr VersionType getPatch() const;
	};

	constexpr Version::Version(VersionType version) :
		m_version(version)
	{}

	constexpr Version::Version(VersionType major, VersionType minor, VersionType patch) :
		m_version(NOU_MAKE_VERISON(clamp(major, static_cast<VersionType>(0), NOU_VERSION_MAJOR_MAX),
			clamp(minor, static_cast<VersionType>(0), NOU_VERSION_MINOR_MAX),
			clamp(patch, static_cast<VersionType>(0), NOU_VERSION_PATCH_MAX)))
	{}

	constexpr typename Version::VersionType Version::getRaw() const
	{
		return m_version;
	}

	constexpr typename Version::VersionType Version::getMajor() const
	{
		return NOU_VERSION_MAJOR(m_version);
	}

	constexpr typename Version::VersionType Version::getMinor() const
	{
		return NOU_VERSION_MINOR(m_version);
	}

	constexpr typename Version::VersionType Version::getPatch() const
	{
		return NOU_VERSION_PATCH(m_version);
	}
}

#endif